// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc_server.proto

/*
Package qlik is a generated protocol buffer package.

It is generated from these files:
	grpc_server.proto

It has these top-level messages:
	ConnectionInfo
	GenericCommand
	GenericCommandResponse
	SessionInfo
	DataInfo
	GetDataOptions
	TimestampStruct
	Dual
	Row
	Column
	BundledRows
	FieldInfo
	GetDataResponse
*/
package qlik

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ValueFlag int32

const (
	ValueFlag_Normal ValueFlag = 0
	ValueFlag_Null   ValueFlag = 1
)

var ValueFlag_name = map[int32]string{
	0: "Normal",
	1: "Null",
}
var ValueFlag_value = map[string]int32{
	"Normal": 0,
	"Null":   1,
}

func (x ValueFlag) String() string {
	return proto.EnumName(ValueFlag_name, int32(x))
}
func (ValueFlag) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type FieldTag int32

const (
	FieldTag_Name        FieldTag = 0
	FieldTag_Email       FieldTag = 1
	FieldTag_Url         FieldTag = 2
	FieldTag_Description FieldTag = 3
	FieldTag_FileName    FieldTag = 4
	FieldTag_Address     FieldTag = 5
	FieldTag_Comment     FieldTag = 6
	FieldTag_PhoneNumber FieldTag = 7
	FieldTag_FaxNumber   FieldTag = 8
	FieldTag_Quantity    FieldTag = 9
	FieldTag_Id          FieldTag = 10
	FieldTag_Money       FieldTag = 100
	FieldTag_MoneyDebit  FieldTag = 101
	FieldTag_MoneyCredit FieldTag = 12
	FieldTag_Interval    FieldTag = 200
	FieldTag_Timestamp   FieldTag = 201
	FieldTag_Date        FieldTag = 202
	FieldTag_StartDate   FieldTag = 203
	FieldTag_EndDate     FieldTag = 204
	FieldTag_Customer    FieldTag = 300
	FieldTag_Employee    FieldTag = 301
	FieldTag_Contractor  FieldTag = 302
	FieldTag_Intern      FieldTag = 303
	FieldTag_USD         FieldTag = 500
	FieldTag_GBP         FieldTag = 501
	FieldTag_SEK         FieldTag = 502
	FieldTag_JPY         FieldTag = 503
	FieldTag_EUR         FieldTag = 504
	FieldTag_CNY         FieldTag = 505
)

var FieldTag_name = map[int32]string{
	0:   "Name",
	1:   "Email",
	2:   "Url",
	3:   "Description",
	4:   "FileName",
	5:   "Address",
	6:   "Comment",
	7:   "PhoneNumber",
	8:   "FaxNumber",
	9:   "Quantity",
	10:  "Id",
	100: "Money",
	101: "MoneyDebit",
	12:  "MoneyCredit",
	200: "Interval",
	201: "Timestamp",
	202: "Date",
	203: "StartDate",
	204: "EndDate",
	300: "Customer",
	301: "Employee",
	302: "Contractor",
	303: "Intern",
	500: "USD",
	501: "GBP",
	502: "SEK",
	503: "JPY",
	504: "EUR",
	505: "CNY",
}
var FieldTag_value = map[string]int32{
	"Name":        0,
	"Email":       1,
	"Url":         2,
	"Description": 3,
	"FileName":    4,
	"Address":     5,
	"Comment":     6,
	"PhoneNumber": 7,
	"FaxNumber":   8,
	"Quantity":    9,
	"Id":          10,
	"Money":       100,
	"MoneyDebit":  101,
	"MoneyCredit": 12,
	"Interval":    200,
	"Timestamp":   201,
	"Date":        202,
	"StartDate":   203,
	"EndDate":     204,
	"Customer":    300,
	"Employee":    301,
	"Contractor":  302,
	"Intern":      303,
	"USD":         500,
	"GBP":         501,
	"SEK":         502,
	"JPY":         503,
	"EUR":         504,
	"CNY":         505,
}

func (x FieldTag) String() string {
	return proto.EnumName(FieldTag_name, int32(x))
}
func (FieldTag) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type FieldType int32

const (
	// This currently 2 enums in one
	// 1. Data Transfer type
	// 2. Data Interpretation type
	FieldType_TEXT                          FieldType = 0
	FieldType_DOUBLE                        FieldType = 1
	FieldType_INTEGER                       FieldType = 2
	FieldType_UNIX_1970_SECONDS_UTC_INTEGER FieldType = 3
	FieldType_STRUCT_TIMESTAMP              FieldType = 4
	FieldType_RFC_3339_TEXT                 FieldType = 5
	FieldType_DAYS_SINCE_1900_DOUBLE        FieldType = 6
)

var FieldType_name = map[int32]string{
	0: "TEXT",
	1: "DOUBLE",
	2: "INTEGER",
	3: "UNIX_1970_SECONDS_UTC_INTEGER",
	4: "STRUCT_TIMESTAMP",
	5: "RFC_3339_TEXT",
	6: "DAYS_SINCE_1900_DOUBLE",
}
var FieldType_value = map[string]int32{
	"TEXT":                          0,
	"DOUBLE":                        1,
	"INTEGER":                       2,
	"UNIX_1970_SECONDS_UTC_INTEGER": 3,
	"STRUCT_TIMESTAMP":              4,
	"RFC_3339_TEXT":                 5,
	"DAYS_SINCE_1900_DOUBLE":        6,
}

func (x FieldType) String() string {
	return proto.EnumName(FieldType_name, int32(x))
}
func (FieldType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ConnectionInfo struct {
	ConnectionString string `protobuf:"bytes,1,opt,name=connectionString" json:"connectionString,omitempty"`
	User             string `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Password         string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *ConnectionInfo) Reset()                    { *m = ConnectionInfo{} }
func (m *ConnectionInfo) String() string            { return proto.CompactTextString(m) }
func (*ConnectionInfo) ProtoMessage()               {}
func (*ConnectionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ConnectionInfo) GetConnectionString() string {
	if m != nil {
		return m.ConnectionString
	}
	return ""
}

func (m *ConnectionInfo) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ConnectionInfo) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type GenericCommand struct {
	Command    string          `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
	Method     string          `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	Parameters []string        `protobuf:"bytes,3,rep,name=parameters" json:"parameters,omitempty"`
	Connection *ConnectionInfo `protobuf:"bytes,4,opt,name=connection" json:"connection,omitempty"`
}

func (m *GenericCommand) Reset()                    { *m = GenericCommand{} }
func (m *GenericCommand) String() string            { return proto.CompactTextString(m) }
func (*GenericCommand) ProtoMessage()               {}
func (*GenericCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GenericCommand) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *GenericCommand) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *GenericCommand) GetParameters() []string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *GenericCommand) GetConnection() *ConnectionInfo {
	if m != nil {
		return m.Connection
	}
	return nil
}

type GenericCommandResponse struct {
	Data string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *GenericCommandResponse) Reset()                    { *m = GenericCommandResponse{} }
func (m *GenericCommandResponse) String() string            { return proto.CompactTextString(m) }
func (*GenericCommandResponse) ProtoMessage()               {}
func (*GenericCommandResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GenericCommandResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type SessionInfo struct {
	User      string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=sessionId" json:"sessionId,omitempty"`
	DocId     string `protobuf:"bytes,3,opt,name=docId" json:"docId,omitempty"`
}

func (m *SessionInfo) Reset()                    { *m = SessionInfo{} }
func (m *SessionInfo) String() string            { return proto.CompactTextString(m) }
func (*SessionInfo) ProtoMessage()               {}
func (*SessionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SessionInfo) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *SessionInfo) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *SessionInfo) GetDocId() string {
	if m != nil {
		return m.DocId
	}
	return ""
}

type DataInfo struct {
	Statement           string `protobuf:"bytes,1,opt,name=statement" json:"statement,omitempty"`
	StatementParameters string `protobuf:"bytes,2,opt,name=statementParameters" json:"statementParameters,omitempty"`
}

func (m *DataInfo) Reset()                    { *m = DataInfo{} }
func (m *DataInfo) String() string            { return proto.CompactTextString(m) }
func (*DataInfo) ProtoMessage()               {}
func (*DataInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DataInfo) GetStatement() string {
	if m != nil {
		return m.Statement
	}
	return ""
}

func (m *DataInfo) GetStatementParameters() string {
	if m != nil {
		return m.StatementParameters
	}
	return ""
}

type GetDataOptions struct {
	Connection  *ConnectionInfo `protobuf:"bytes,1,opt,name=connection" json:"connection,omitempty"`
	SessionInfo *SessionInfo    `protobuf:"bytes,2,opt,name=sessionInfo" json:"sessionInfo,omitempty"`
	Parameters  *DataInfo       `protobuf:"bytes,3,opt,name=parameters" json:"parameters,omitempty"`
}

func (m *GetDataOptions) Reset()                    { *m = GetDataOptions{} }
func (m *GetDataOptions) String() string            { return proto.CompactTextString(m) }
func (*GetDataOptions) ProtoMessage()               {}
func (*GetDataOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetDataOptions) GetConnection() *ConnectionInfo {
	if m != nil {
		return m.Connection
	}
	return nil
}

func (m *GetDataOptions) GetSessionInfo() *SessionInfo {
	if m != nil {
		return m.SessionInfo
	}
	return nil
}

func (m *GetDataOptions) GetParameters() *DataInfo {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type TimestampStruct struct {
	Year       int32 `protobuf:"varint,1,opt,name=year" json:"year,omitempty"`
	Month      int32 `protobuf:"varint,2,opt,name=month" json:"month,omitempty"`
	Day        int32 `protobuf:"varint,3,opt,name=day" json:"day,omitempty"`
	Hour       int32 `protobuf:"varint,4,opt,name=hour" json:"hour,omitempty"`
	Minute     int32 `protobuf:"varint,5,opt,name=minute" json:"minute,omitempty"`
	Second     int32 `protobuf:"varint,6,opt,name=second" json:"second,omitempty"`
	NanoSecond int32 `protobuf:"varint,7,opt,name=nanoSecond" json:"nanoSecond,omitempty"`
}

func (m *TimestampStruct) Reset()                    { *m = TimestampStruct{} }
func (m *TimestampStruct) String() string            { return proto.CompactTextString(m) }
func (*TimestampStruct) ProtoMessage()               {}
func (*TimestampStruct) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TimestampStruct) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *TimestampStruct) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

func (m *TimestampStruct) GetDay() int32 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *TimestampStruct) GetHour() int32 {
	if m != nil {
		return m.Hour
	}
	return 0
}

func (m *TimestampStruct) GetMinute() int32 {
	if m != nil {
		return m.Minute
	}
	return 0
}

func (m *TimestampStruct) GetSecond() int32 {
	if m != nil {
		return m.Second
	}
	return 0
}

func (m *TimestampStruct) GetNanoSecond() int32 {
	if m != nil {
		return m.NanoSecond
	}
	return 0
}

type Dual struct {
	NumData   float64          `protobuf:"fixed64,1,opt,name=numData" json:"numData,omitempty"`
	StrData   string           `protobuf:"bytes,2,opt,name=strData" json:"strData,omitempty"`
	IntData   int64            `protobuf:"varint,3,opt,name=intData" json:"intData,omitempty"`
	Flag      ValueFlag        `protobuf:"varint,4,opt,name=flag,enum=qlik.ValueFlag" json:"flag,omitempty"`
	TimeStamp *TimestampStruct `protobuf:"bytes,5,opt,name=timeStamp" json:"timeStamp,omitempty"`
}

func (m *Dual) Reset()                    { *m = Dual{} }
func (m *Dual) String() string            { return proto.CompactTextString(m) }
func (*Dual) ProtoMessage()               {}
func (*Dual) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Dual) GetNumData() float64 {
	if m != nil {
		return m.NumData
	}
	return 0
}

func (m *Dual) GetStrData() string {
	if m != nil {
		return m.StrData
	}
	return ""
}

func (m *Dual) GetIntData() int64 {
	if m != nil {
		return m.IntData
	}
	return 0
}

func (m *Dual) GetFlag() ValueFlag {
	if m != nil {
		return m.Flag
	}
	return ValueFlag_Normal
}

func (m *Dual) GetTimeStamp() *TimestampStruct {
	if m != nil {
		return m.TimeStamp
	}
	return nil
}

type Row struct {
	Duals []*Dual `protobuf:"bytes,1,rep,name=duals" json:"duals,omitempty"`
}

func (m *Row) Reset()                    { *m = Row{} }
func (m *Row) String() string            { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()               {}
func (*Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Row) GetDuals() []*Dual {
	if m != nil {
		return m.Duals
	}
	return nil
}

type Column struct {
	Strings    []string           `protobuf:"bytes,1,rep,name=strings" json:"strings,omitempty"`
	Numbers    []float64          `protobuf:"fixed64,2,rep,packed,name=numbers" json:"numbers,omitempty"`
	Integers   []int64            `protobuf:"varint,3,rep,packed,name=integers" json:"integers,omitempty"`
	TimeStamps []*TimestampStruct `protobuf:"bytes,4,rep,name=timeStamps" json:"timeStamps,omitempty"`
	Flags      []ValueFlag        `protobuf:"varint,5,rep,packed,name=flags,enum=qlik.ValueFlag" json:"flags,omitempty"`
}

func (m *Column) Reset()                    { *m = Column{} }
func (m *Column) String() string            { return proto.CompactTextString(m) }
func (*Column) ProtoMessage()               {}
func (*Column) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Column) GetStrings() []string {
	if m != nil {
		return m.Strings
	}
	return nil
}

func (m *Column) GetNumbers() []float64 {
	if m != nil {
		return m.Numbers
	}
	return nil
}

func (m *Column) GetIntegers() []int64 {
	if m != nil {
		return m.Integers
	}
	return nil
}

func (m *Column) GetTimeStamps() []*TimestampStruct {
	if m != nil {
		return m.TimeStamps
	}
	return nil
}

func (m *Column) GetFlags() []ValueFlag {
	if m != nil {
		return m.Flags
	}
	return nil
}

type BundledRows struct {
	Rows []*Row    `protobuf:"bytes,1,rep,name=rows" json:"rows,omitempty"`
	Cols []*Column `protobuf:"bytes,2,rep,name=cols" json:"cols,omitempty"`
}

func (m *BundledRows) Reset()                    { *m = BundledRows{} }
func (m *BundledRows) String() string            { return proto.CompactTextString(m) }
func (*BundledRows) ProtoMessage()               {}
func (*BundledRows) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *BundledRows) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *BundledRows) GetCols() []*Column {
	if m != nil {
		return m.Cols
	}
	return nil
}

type FieldInfo struct {
	Name string     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type FieldType  `protobuf:"varint,2,opt,name=type,enum=qlik.FieldType" json:"type,omitempty"`
	Tags []FieldTag `protobuf:"varint,3,rep,packed,name=tags,enum=qlik.FieldTag" json:"tags,omitempty"`
}

func (m *FieldInfo) Reset()                    { *m = FieldInfo{} }
func (m *FieldInfo) String() string            { return proto.CompactTextString(m) }
func (*FieldInfo) ProtoMessage()               {}
func (*FieldInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FieldInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FieldInfo) GetType() FieldType {
	if m != nil {
		return m.Type
	}
	return FieldType_TEXT
}

func (m *FieldInfo) GetTags() []FieldTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type GetDataResponse struct {
	FieldInfo []*FieldInfo `protobuf:"bytes,1,rep,name=fieldInfo" json:"fieldInfo,omitempty"`
	TableName string       `protobuf:"bytes,2,opt,name=tableName" json:"tableName,omitempty"`
}

func (m *GetDataResponse) Reset()                    { *m = GetDataResponse{} }
func (m *GetDataResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDataResponse) ProtoMessage()               {}
func (*GetDataResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetDataResponse) GetFieldInfo() []*FieldInfo {
	if m != nil {
		return m.FieldInfo
	}
	return nil
}

func (m *GetDataResponse) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func init() {
	proto.RegisterType((*ConnectionInfo)(nil), "qlik.ConnectionInfo")
	proto.RegisterType((*GenericCommand)(nil), "qlik.GenericCommand")
	proto.RegisterType((*GenericCommandResponse)(nil), "qlik.GenericCommandResponse")
	proto.RegisterType((*SessionInfo)(nil), "qlik.SessionInfo")
	proto.RegisterType((*DataInfo)(nil), "qlik.DataInfo")
	proto.RegisterType((*GetDataOptions)(nil), "qlik.GetDataOptions")
	proto.RegisterType((*TimestampStruct)(nil), "qlik.TimestampStruct")
	proto.RegisterType((*Dual)(nil), "qlik.Dual")
	proto.RegisterType((*Row)(nil), "qlik.Row")
	proto.RegisterType((*Column)(nil), "qlik.Column")
	proto.RegisterType((*BundledRows)(nil), "qlik.BundledRows")
	proto.RegisterType((*FieldInfo)(nil), "qlik.FieldInfo")
	proto.RegisterType((*GetDataResponse)(nil), "qlik.GetDataResponse")
	proto.RegisterEnum("qlik.ValueFlag", ValueFlag_name, ValueFlag_value)
	proto.RegisterEnum("qlik.FieldTag", FieldTag_name, FieldTag_value)
	proto.RegisterEnum("qlik.FieldType", FieldType_name, FieldType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Connector service

type ConnectorClient interface {
	ExecuteGenericCommand(ctx context.Context, in *GenericCommand, opts ...grpc.CallOption) (*GenericCommandResponse, error)
	GetData(ctx context.Context, in *GetDataOptions, opts ...grpc.CallOption) (Connector_GetDataClient, error)
}

type connectorClient struct {
	cc *grpc.ClientConn
}

func NewConnectorClient(cc *grpc.ClientConn) ConnectorClient {
	return &connectorClient{cc}
}

func (c *connectorClient) ExecuteGenericCommand(ctx context.Context, in *GenericCommand, opts ...grpc.CallOption) (*GenericCommandResponse, error) {
	out := new(GenericCommandResponse)
	err := grpc.Invoke(ctx, "/qlik.Connector/ExecuteGenericCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorClient) GetData(ctx context.Context, in *GetDataOptions, opts ...grpc.CallOption) (Connector_GetDataClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Connector_serviceDesc.Streams[0], c.cc, "/qlik.Connector/GetData", opts...)
	if err != nil {
		return nil, err
	}
	x := &connectorGetDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Connector_GetDataClient interface {
	Recv() (*BundledRows, error)
	grpc.ClientStream
}

type connectorGetDataClient struct {
	grpc.ClientStream
}

func (x *connectorGetDataClient) Recv() (*BundledRows, error) {
	m := new(BundledRows)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Connector service

type ConnectorServer interface {
	ExecuteGenericCommand(context.Context, *GenericCommand) (*GenericCommandResponse, error)
	GetData(*GetDataOptions, Connector_GetDataServer) error
}

func RegisterConnectorServer(s *grpc.Server, srv ConnectorServer) {
	s.RegisterService(&_Connector_serviceDesc, srv)
}

func _Connector_ExecuteGenericCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServer).ExecuteGenericCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qlik.Connector/ExecuteGenericCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServer).ExecuteGenericCommand(ctx, req.(*GenericCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connector_GetData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDataOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConnectorServer).GetData(m, &connectorGetDataServer{stream})
}

type Connector_GetDataServer interface {
	Send(*BundledRows) error
	grpc.ServerStream
}

type connectorGetDataServer struct {
	grpc.ServerStream
}

func (x *connectorGetDataServer) Send(m *BundledRows) error {
	return x.ServerStream.SendMsg(m)
}

var _Connector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qlik.Connector",
	HandlerType: (*ConnectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteGenericCommand",
			Handler:    _Connector_ExecuteGenericCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetData",
			Handler:       _Connector_GetData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc_server.proto",
}

func init() { proto.RegisterFile("grpc_server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xdb, 0x6e, 0xdb, 0x46,
	0x13, 0x36, 0x45, 0xea, 0xc0, 0x91, 0x23, 0x6f, 0xf6, 0x4f, 0x02, 0xc1, 0x48, 0x7e, 0x28, 0x2c,
	0x8a, 0x1a, 0x46, 0x6b, 0x38, 0x72, 0x0f, 0xc8, 0x65, 0x22, 0xd1, 0x81, 0xda, 0x5a, 0x71, 0x97,
	0x52, 0x91, 0xf4, 0xa2, 0xc2, 0x5a, 0xdc, 0xc8, 0x44, 0xc9, 0x5d, 0x75, 0xb9, 0x8c, 0xa3, 0xeb,
	0xbe, 0x41, 0x2f, 0x8a, 0xbe, 0x43, 0xdb, 0x14, 0xbd, 0xe9, 0x33, 0xf4, 0xf4, 0x38, 0x3d, 0xde,
	0x15, 0xbb, 0x24, 0x25, 0xc6, 0x4d, 0x81, 0xde, 0xcd, 0x37, 0x87, 0x9d, 0x99, 0x6f, 0x66, 0x97,
	0x84, 0xab, 0x0b, 0xb9, 0x9c, 0xcf, 0x52, 0x26, 0x9f, 0x32, 0x79, 0xb0, 0x94, 0x42, 0x09, 0xec,
	0x7c, 0x1a, 0x47, 0x9f, 0x78, 0x31, 0x74, 0x06, 0x82, 0x73, 0x36, 0x57, 0x91, 0xe0, 0x23, 0xfe,
	0x44, 0xe0, 0x7d, 0x40, 0xf3, 0xb5, 0x26, 0x50, 0x32, 0xe2, 0x8b, 0xae, 0xd5, 0xb3, 0xf6, 0x5c,
	0xf2, 0x0f, 0x3d, 0xc6, 0xe0, 0x64, 0x29, 0x93, 0xdd, 0x9a, 0xb1, 0x1b, 0x19, 0xef, 0x42, 0x6b,
	0x49, 0xd3, 0xf4, 0x42, 0xc8, 0xb0, 0x6b, 0x1b, 0xfd, 0x1a, 0x7b, 0x5f, 0x5a, 0xd0, 0x79, 0xc0,
	0x38, 0x93, 0xd1, 0x7c, 0x20, 0x92, 0x84, 0xf2, 0x10, 0x77, 0xa1, 0x39, 0xcf, 0xc5, 0x22, 0x4b,
	0x09, 0xf1, 0x0d, 0x68, 0x24, 0x4c, 0x9d, 0x8b, 0xb0, 0x38, 0xbe, 0x40, 0xf8, 0xff, 0x00, 0x4b,
	0x2a, 0x69, 0xc2, 0x14, 0x93, 0x69, 0xd7, 0xee, 0xd9, 0x7b, 0x2e, 0xa9, 0x68, 0xf0, 0x9b, 0x00,
	0x9b, 0x42, 0xbb, 0x4e, 0xcf, 0xda, 0x6b, 0xf7, 0xaf, 0x1d, 0xe8, 0x6e, 0x0f, 0x5e, 0x6c, 0x95,
	0x54, 0xfc, 0xbc, 0xd7, 0xe1, 0xc6, 0x8b, 0x95, 0x11, 0x96, 0x2e, 0x05, 0x4f, 0x99, 0x6e, 0x32,
	0xa4, 0x8a, 0x16, 0xe5, 0x19, 0xd9, 0x9b, 0x42, 0x3b, 0x60, 0x69, 0x5a, 0x72, 0x56, 0xf2, 0x60,
	0x55, 0x78, 0xb8, 0x09, 0x6e, 0x5a, 0xb8, 0x94, 0x1d, 0x6c, 0x14, 0xf8, 0x1a, 0xd4, 0x43, 0x31,
	0x1f, 0x95, 0x14, 0xe5, 0xc0, 0xfb, 0x08, 0x5a, 0x43, 0xaa, 0xa8, 0x39, 0x53, 0xc7, 0x2b, 0xaa,
	0x58, 0xc2, 0xb8, 0x2a, 0x0e, 0xde, 0x28, 0xf0, 0x21, 0xfc, 0x6f, 0x0d, 0x4e, 0x37, 0x6c, 0xe4,
	0x79, 0x5e, 0x66, 0xf2, 0xbe, 0x32, 0xdc, 0x2b, 0x7d, 0xfe, 0xc3, 0xa5, 0x6e, 0xf9, 0x32, 0x53,
	0xd6, 0x7f, 0x63, 0x0a, 0x1f, 0x41, 0x3b, 0xdd, 0xf4, 0x6e, 0x52, 0xb6, 0xfb, 0x57, 0xf3, 0xb0,
	0x0a, 0x29, 0xa4, 0xea, 0x85, 0x0f, 0x2e, 0x0d, 0x4d, 0xc7, 0x74, 0xf2, 0x98, 0xb2, 0xe3, 0xea,
	0x10, 0xbd, 0xef, 0x2c, 0xd8, 0x99, 0x44, 0x09, 0x4b, 0x15, 0x4d, 0x96, 0x81, 0x92, 0xd9, 0x5c,
	0x69, 0x96, 0x57, 0x8c, 0xe6, 0x2c, 0xd7, 0x89, 0x91, 0x35, 0x8f, 0x89, 0xe0, 0xea, 0xdc, 0x94,
	0x51, 0x27, 0x39, 0xc0, 0x08, 0xec, 0x90, 0xae, 0x4c, 0x9a, 0x3a, 0xd1, 0xa2, 0x8e, 0x3d, 0x17,
	0x99, 0x34, 0xeb, 0x50, 0x27, 0x46, 0x36, 0x0b, 0x16, 0xf1, 0x4c, 0xb1, 0x6e, 0xdd, 0x68, 0x0b,
	0xa4, 0xf5, 0x29, 0x9b, 0x0b, 0x1e, 0x76, 0x1b, 0xb9, 0x3e, 0x47, 0x7a, 0xf1, 0x38, 0xe5, 0x22,
	0xc8, 0x6d, 0x4d, 0x63, 0xab, 0x68, 0xbc, 0xe7, 0x16, 0x38, 0xc3, 0x8c, 0xc6, 0x7a, 0xa7, 0x79,
	0x96, 0x0c, 0xcb, 0xa5, 0xb1, 0x48, 0x09, 0xb5, 0x25, 0x55, 0xd2, 0x58, 0xf2, 0x51, 0x95, 0x50,
	0x5b, 0x22, 0x6e, 0xa6, 0x63, 0xca, 0xb6, 0x49, 0x09, 0xf1, 0x2b, 0xe0, 0x3c, 0x89, 0xe9, 0xc2,
	0x94, 0xde, 0xe9, 0xef, 0xe4, 0xa4, 0x7d, 0x48, 0xe3, 0x8c, 0x1d, 0xc7, 0x74, 0x41, 0x8c, 0x11,
	0x1f, 0x81, 0xab, 0xa2, 0x84, 0x05, 0x9a, 0x2e, 0xd3, 0x4e, 0xbb, 0x7f, 0x3d, 0xf7, 0xbc, 0xc4,
	0x22, 0xd9, 0xf8, 0x79, 0xaf, 0x81, 0x4d, 0xc4, 0x05, 0xee, 0x41, 0x3d, 0xcc, 0x68, 0x9c, 0x76,
	0xad, 0x9e, 0xbd, 0xd7, 0xee, 0x43, 0x31, 0x96, 0x8c, 0xc6, 0x24, 0x37, 0x78, 0xdf, 0x5b, 0xd0,
	0x18, 0x88, 0x38, 0x4b, 0x78, 0xd1, 0x41, 0xc4, 0x17, 0xb9, 0x7b, 0xde, 0x81, 0x86, 0x45, 0xd7,
	0x67, 0xf9, 0x1a, 0xda, 0x45, 0xd7, 0x1a, 0xea, 0x27, 0x21, 0xe2, 0x8a, 0x2d, 0xca, 0xfb, 0x6a,
	0x93, 0x35, 0xc6, 0x6f, 0x01, 0xac, 0x0b, 0x4a, 0xbb, 0x8e, 0xa9, 0xe0, 0x5f, 0x2a, 0xaf, 0x38,
	0xe2, 0x57, 0xa1, 0xae, 0xfb, 0x4e, 0xbb, 0xf5, 0x9e, 0xfd, 0x32, 0x56, 0x72, 0xab, 0x37, 0x86,
	0xf6, 0xfd, 0x8c, 0x87, 0x31, 0x0b, 0x89, 0xb8, 0x48, 0xf1, 0x2d, 0x70, 0xa4, 0xb8, 0x28, 0x1b,
	0x75, 0xf3, 0x20, 0x22, 0x2e, 0x88, 0x51, 0xe3, 0x1e, 0x38, 0x73, 0x11, 0xe7, 0xe5, 0xb7, 0xfb,
	0xdb, 0xe5, 0x4d, 0xd0, 0x7d, 0x13, 0x63, 0xf1, 0xce, 0xc1, 0x3d, 0x8e, 0x58, 0x1c, 0x96, 0xb7,
	0x9e, 0xd3, 0x84, 0x95, 0xb7, 0x5e, 0xcb, 0x7a, 0x58, 0x6a, 0xb5, 0x64, 0x66, 0xba, 0xeb, 0xb2,
	0x4c, 0xc8, 0x64, 0xb5, 0x64, 0xc4, 0x18, 0xb1, 0x07, 0x8e, 0xd2, 0xb5, 0xdb, 0xa6, 0xf6, 0x4e,
	0xd5, 0x49, 0x0f, 0x54, 0xdb, 0xbc, 0x8f, 0x61, 0xa7, 0xb8, 0xad, 0xeb, 0x87, 0xe8, 0x0d, 0x70,
	0x9f, 0x94, 0xc9, 0x8b, 0x16, 0xaa, 0x09, 0xcc, 0x1d, 0xda, 0x78, 0xe8, 0x07, 0x44, 0xd1, 0xb3,
	0x98, 0x8d, 0x75, 0x8d, 0xc5, 0x03, 0xb4, 0x56, 0xec, 0xdf, 0x06, 0x77, 0xcd, 0x16, 0x06, 0x68,
	0x8c, 0x85, 0x4c, 0x68, 0x8c, 0xb6, 0x70, 0x0b, 0x9c, 0x71, 0x16, 0xc7, 0xc8, 0xda, 0xff, 0xcc,
	0x86, 0x56, 0x59, 0x95, 0x51, 0xd3, 0x84, 0xa1, 0x2d, 0xec, 0x42, 0xdd, 0x4f, 0x68, 0x14, 0x23,
	0x0b, 0x37, 0xc1, 0x9e, 0xca, 0x18, 0xd5, 0xf0, 0x0e, 0xb4, 0x87, 0x2c, 0x9d, 0xcb, 0xc8, 0xbc,
	0x2c, 0xc8, 0xc6, 0xdb, 0x3a, 0x34, 0x4f, 0x85, 0x1c, 0xdc, 0x86, 0xe6, 0xbd, 0x30, 0x94, 0x2c,
	0x4d, 0x51, 0x5d, 0x03, 0xfd, 0xc4, 0x32, 0xae, 0x50, 0x43, 0x07, 0x9e, 0x9e, 0x0b, 0xce, 0xc6,
	0x66, 0x55, 0x50, 0x13, 0x5f, 0x01, 0xf7, 0x98, 0x3e, 0x2b, 0x60, 0x4b, 0x9f, 0xf3, 0x41, 0x46,
	0xb9, 0x8a, 0xd4, 0x0a, 0xb9, 0xb8, 0x01, 0xb5, 0x51, 0x88, 0x40, 0x97, 0x70, 0x22, 0x38, 0x5b,
	0xa1, 0x10, 0x77, 0x00, 0x8c, 0x38, 0x64, 0x67, 0x91, 0x42, 0x4c, 0x1f, 0x68, 0xf0, 0x40, 0xb2,
	0x30, 0x52, 0x68, 0x1b, 0x5f, 0x81, 0xd6, 0x88, 0x2b, 0x26, 0x9f, 0xd2, 0x18, 0xfd, 0x60, 0xe1,
	0x0e, 0xb8, 0xeb, 0xbd, 0x42, 0x3f, 0x5a, 0xd8, 0x05, 0x67, 0x48, 0x15, 0x43, 0x3f, 0x19, 0x53,
	0xa0, 0xa8, 0x54, 0x06, 0xff, 0x6c, 0xe1, 0x6d, 0x68, 0xfa, 0x3c, 0x34, 0xe8, 0x17, 0x4b, 0x9f,
	0x33, 0xc8, 0x52, 0x25, 0x12, 0x26, 0xd1, 0xd7, 0x35, 0x0d, 0xfd, 0x64, 0x19, 0x8b, 0x15, 0x63,
	0xe8, 0x1b, 0x4d, 0x00, 0x0c, 0x04, 0x57, 0x92, 0xce, 0x95, 0x90, 0xe8, 0x79, 0x0d, 0xb7, 0xa1,
	0x61, 0xd2, 0x72, 0xf4, 0x6d, 0x0d, 0xb7, 0xc0, 0x9e, 0x06, 0x43, 0xf4, 0xab, 0xad, 0xa5, 0x07,
	0xf7, 0x4f, 0xd1, 0x6f, 0x46, 0x0a, 0xfc, 0xf7, 0xd0, 0xef, 0x46, 0x7a, 0xf7, 0xf4, 0x31, 0xfa,
	0xc3, 0x48, 0xfe, 0x94, 0xa0, 0x3f, 0x8d, 0x34, 0x18, 0x3f, 0x46, 0x7f, 0xd9, 0xfb, 0x5f, 0x58,
	0xc5, 0xce, 0xe9, 0x05, 0xd2, 0x63, 0x98, 0xf8, 0x8f, 0x26, 0x68, 0x4b, 0xcf, 0x6c, 0xf8, 0x70,
	0x7a, 0xff, 0x7d, 0x1f, 0x59, 0x9a, 0xd2, 0xd1, 0x78, 0xe2, 0x3f, 0xf0, 0x09, 0xaa, 0xe1, 0xdb,
	0x70, 0x6b, 0x3a, 0x1e, 0x3d, 0x9a, 0xdd, 0xb9, 0xfb, 0xce, 0xe1, 0x2c, 0xf0, 0x07, 0x0f, 0xc7,
	0xc3, 0x60, 0x36, 0x9d, 0x0c, 0x66, 0xa5, 0x8b, 0x8d, 0xaf, 0x01, 0x0a, 0x26, 0x64, 0x3a, 0x98,
	0xcc, 0x26, 0xa3, 0x13, 0x3f, 0x98, 0xdc, 0x3b, 0x39, 0x45, 0x0e, 0xbe, 0x0a, 0x57, 0xc8, 0xf1,
	0x60, 0x76, 0x74, 0x74, 0x74, 0x77, 0x66, 0x92, 0xd4, 0xf1, 0x2e, 0xdc, 0x18, 0xde, 0x7b, 0x1c,
	0xcc, 0x82, 0xd1, 0x78, 0xe0, 0xcf, 0xee, 0xdc, 0x3d, 0x3c, 0x9c, 0x15, 0x49, 0x1b, 0xfd, 0xcf,
	0x2d, 0x70, 0x8b, 0xcf, 0x84, 0x90, 0xf8, 0x04, 0xae, 0xfb, 0xcf, 0xd8, 0x3c, 0x53, 0xec, 0xd2,
	0x07, 0xbe, 0xf8, 0xa0, 0xbc, 0xa8, 0xdd, 0xbd, 0xf9, 0x32, 0x6d, 0xb9, 0xe9, 0xde, 0x16, 0x7e,
	0x1b, 0x9a, 0xc5, 0xfa, 0x6f, 0x0e, 0xa8, 0x7e, 0xbb, 0x76, 0x8b, 0x0f, 0x4e, 0xe5, 0x76, 0x7b,
	0x5b, 0x87, 0xd6, 0x59, 0xc3, 0xfc, 0xdc, 0x1c, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xde, 0xd7,
	0xdc, 0x30, 0xf1, 0x08, 0x00, 0x00,
}

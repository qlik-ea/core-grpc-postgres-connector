// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc_server.proto

/*
Package qlik is a generated protocol buffer package.

It is generated from these files:
	grpc_server.proto

It has these top-level messages:
	ConnectionInfo
	GenericCommand
	GenericCommandResponse
	SessionInfo
	DataInfo
	GetDataOptions
	Dual
	Row
	Column
	BundledRows
	FieldInfo
	GetDataResponse
*/
package qlik

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FieldType int32

const (
	FieldType_UNKNOWN   FieldType = 0
	FieldType_ASCII     FieldType = 1
	FieldType_REAL      FieldType = 2
	FieldType_DATE      FieldType = 3
	FieldType_TIME      FieldType = 4
	FieldType_TIMESTAMP FieldType = 5
	FieldType_INTERVAL  FieldType = 6
	FieldType_INTEGER   FieldType = 7
	FieldType_FIX       FieldType = 8
	FieldType_MONEY     FieldType = 9
)

var FieldType_name = map[int32]string{
	0: "UNKNOWN",
	1: "ASCII",
	2: "REAL",
	3: "DATE",
	4: "TIME",
	5: "TIMESTAMP",
	6: "INTERVAL",
	7: "INTEGER",
	8: "FIX",
	9: "MONEY",
}
var FieldType_value = map[string]int32{
	"UNKNOWN":   0,
	"ASCII":     1,
	"REAL":      2,
	"DATE":      3,
	"TIME":      4,
	"TIMESTAMP": 5,
	"INTERVAL":  6,
	"INTEGER":   7,
	"FIX":       8,
	"MONEY":     9,
}

func (x FieldType) String() string {
	return proto.EnumName(FieldType_name, int32(x))
}
func (FieldType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ConnectionInfo struct {
	ConnectionString string `protobuf:"bytes,1,opt,name=connectionString" json:"connectionString,omitempty"`
	User             string `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Password         string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *ConnectionInfo) Reset()                    { *m = ConnectionInfo{} }
func (m *ConnectionInfo) String() string            { return proto.CompactTextString(m) }
func (*ConnectionInfo) ProtoMessage()               {}
func (*ConnectionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ConnectionInfo) GetConnectionString() string {
	if m != nil {
		return m.ConnectionString
	}
	return ""
}

func (m *ConnectionInfo) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ConnectionInfo) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type GenericCommand struct {
	Command    string          `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
	Method     string          `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	Parameters []string        `protobuf:"bytes,3,rep,name=parameters" json:"parameters,omitempty"`
	Connection *ConnectionInfo `protobuf:"bytes,4,opt,name=connection" json:"connection,omitempty"`
}

func (m *GenericCommand) Reset()                    { *m = GenericCommand{} }
func (m *GenericCommand) String() string            { return proto.CompactTextString(m) }
func (*GenericCommand) ProtoMessage()               {}
func (*GenericCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GenericCommand) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *GenericCommand) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *GenericCommand) GetParameters() []string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *GenericCommand) GetConnection() *ConnectionInfo {
	if m != nil {
		return m.Connection
	}
	return nil
}

type GenericCommandResponse struct {
	Data string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *GenericCommandResponse) Reset()                    { *m = GenericCommandResponse{} }
func (m *GenericCommandResponse) String() string            { return proto.CompactTextString(m) }
func (*GenericCommandResponse) ProtoMessage()               {}
func (*GenericCommandResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GenericCommandResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type SessionInfo struct {
	User      string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=sessionId" json:"sessionId,omitempty"`
	DocId     string `protobuf:"bytes,3,opt,name=docId" json:"docId,omitempty"`
}

func (m *SessionInfo) Reset()                    { *m = SessionInfo{} }
func (m *SessionInfo) String() string            { return proto.CompactTextString(m) }
func (*SessionInfo) ProtoMessage()               {}
func (*SessionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SessionInfo) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *SessionInfo) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *SessionInfo) GetDocId() string {
	if m != nil {
		return m.DocId
	}
	return ""
}

type DataInfo struct {
	Statement           string `protobuf:"bytes,1,opt,name=statement" json:"statement,omitempty"`
	StatementParameters string `protobuf:"bytes,2,opt,name=statementParameters" json:"statementParameters,omitempty"`
}

func (m *DataInfo) Reset()                    { *m = DataInfo{} }
func (m *DataInfo) String() string            { return proto.CompactTextString(m) }
func (*DataInfo) ProtoMessage()               {}
func (*DataInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DataInfo) GetStatement() string {
	if m != nil {
		return m.Statement
	}
	return ""
}

func (m *DataInfo) GetStatementParameters() string {
	if m != nil {
		return m.StatementParameters
	}
	return ""
}

type GetDataOptions struct {
	Connection  *ConnectionInfo `protobuf:"bytes,1,opt,name=connection" json:"connection,omitempty"`
	SessionInfo *SessionInfo    `protobuf:"bytes,2,opt,name=sessionInfo" json:"sessionInfo,omitempty"`
	Parameters  *DataInfo       `protobuf:"bytes,3,opt,name=parameters" json:"parameters,omitempty"`
}

func (m *GetDataOptions) Reset()                    { *m = GetDataOptions{} }
func (m *GetDataOptions) String() string            { return proto.CompactTextString(m) }
func (*GetDataOptions) ProtoMessage()               {}
func (*GetDataOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetDataOptions) GetConnection() *ConnectionInfo {
	if m != nil {
		return m.Connection
	}
	return nil
}

func (m *GetDataOptions) GetSessionInfo() *SessionInfo {
	if m != nil {
		return m.SessionInfo
	}
	return nil
}

func (m *GetDataOptions) GetParameters() *DataInfo {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type Dual struct {
	NumData   float64 `protobuf:"fixed64,1,opt,name=numData" json:"numData,omitempty"`
	StrData   string  `protobuf:"bytes,2,opt,name=strData" json:"strData,omitempty"`
	StrIsNull bool    `protobuf:"varint,3,opt,name=strIsNull" json:"strIsNull,omitempty"`
}

func (m *Dual) Reset()                    { *m = Dual{} }
func (m *Dual) String() string            { return proto.CompactTextString(m) }
func (*Dual) ProtoMessage()               {}
func (*Dual) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Dual) GetNumData() float64 {
	if m != nil {
		return m.NumData
	}
	return 0
}

func (m *Dual) GetStrData() string {
	if m != nil {
		return m.StrData
	}
	return ""
}

func (m *Dual) GetStrIsNull() bool {
	if m != nil {
		return m.StrIsNull
	}
	return false
}

type Row struct {
	Duals []*Dual `protobuf:"bytes,1,rep,name=duals" json:"duals,omitempty"`
}

func (m *Row) Reset()                    { *m = Row{} }
func (m *Row) String() string            { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()               {}
func (*Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Row) GetDuals() []*Dual {
	if m != nil {
		return m.Duals
	}
	return nil
}

type Column struct {
	Strings    []string  `protobuf:"bytes,1,rep,name=strings" json:"strings,omitempty"`
	Numbers    []float64 `protobuf:"fixed64,2,rep,packed,name=numbers" json:"numbers,omitempty"`
	StrIsNulls []bool    `protobuf:"varint,3,rep,packed,name=strIsNulls" json:"strIsNulls,omitempty"`
}

func (m *Column) Reset()                    { *m = Column{} }
func (m *Column) String() string            { return proto.CompactTextString(m) }
func (*Column) ProtoMessage()               {}
func (*Column) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Column) GetStrings() []string {
	if m != nil {
		return m.Strings
	}
	return nil
}

func (m *Column) GetNumbers() []float64 {
	if m != nil {
		return m.Numbers
	}
	return nil
}

func (m *Column) GetStrIsNulls() []bool {
	if m != nil {
		return m.StrIsNulls
	}
	return nil
}

type BundledRows struct {
	Rows []*Row    `protobuf:"bytes,1,rep,name=rows" json:"rows,omitempty"`
	Cols []*Column `protobuf:"bytes,2,rep,name=cols" json:"cols,omitempty"`
}

func (m *BundledRows) Reset()                    { *m = BundledRows{} }
func (m *BundledRows) String() string            { return proto.CompactTextString(m) }
func (*BundledRows) ProtoMessage()               {}
func (*BundledRows) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BundledRows) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *BundledRows) GetCols() []*Column {
	if m != nil {
		return m.Cols
	}
	return nil
}

type FieldInfo struct {
	Name string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type FieldType `protobuf:"varint,2,opt,name=type,enum=qlik.FieldType" json:"type,omitempty"`
}

func (m *FieldInfo) Reset()                    { *m = FieldInfo{} }
func (m *FieldInfo) String() string            { return proto.CompactTextString(m) }
func (*FieldInfo) ProtoMessage()               {}
func (*FieldInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *FieldInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FieldInfo) GetType() FieldType {
	if m != nil {
		return m.Type
	}
	return FieldType_UNKNOWN
}

type GetDataResponse struct {
	FieldInfo []*FieldInfo `protobuf:"bytes,1,rep,name=fieldInfo" json:"fieldInfo,omitempty"`
	TableName string       `protobuf:"bytes,2,opt,name=tableName" json:"tableName,omitempty"`
}

func (m *GetDataResponse) Reset()                    { *m = GetDataResponse{} }
func (m *GetDataResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDataResponse) ProtoMessage()               {}
func (*GetDataResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetDataResponse) GetFieldInfo() []*FieldInfo {
	if m != nil {
		return m.FieldInfo
	}
	return nil
}

func (m *GetDataResponse) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func init() {
	proto.RegisterType((*ConnectionInfo)(nil), "qlik.ConnectionInfo")
	proto.RegisterType((*GenericCommand)(nil), "qlik.GenericCommand")
	proto.RegisterType((*GenericCommandResponse)(nil), "qlik.GenericCommandResponse")
	proto.RegisterType((*SessionInfo)(nil), "qlik.SessionInfo")
	proto.RegisterType((*DataInfo)(nil), "qlik.DataInfo")
	proto.RegisterType((*GetDataOptions)(nil), "qlik.GetDataOptions")
	proto.RegisterType((*Dual)(nil), "qlik.Dual")
	proto.RegisterType((*Row)(nil), "qlik.Row")
	proto.RegisterType((*Column)(nil), "qlik.Column")
	proto.RegisterType((*BundledRows)(nil), "qlik.BundledRows")
	proto.RegisterType((*FieldInfo)(nil), "qlik.FieldInfo")
	proto.RegisterType((*GetDataResponse)(nil), "qlik.GetDataResponse")
	proto.RegisterEnum("qlik.FieldType", FieldType_name, FieldType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Connector service

type ConnectorClient interface {
	ExecuteGenericCommand(ctx context.Context, in *GenericCommand, opts ...grpc.CallOption) (*GenericCommandResponse, error)
	GetData(ctx context.Context, in *GetDataOptions, opts ...grpc.CallOption) (Connector_GetDataClient, error)
}

type connectorClient struct {
	cc *grpc.ClientConn
}

func NewConnectorClient(cc *grpc.ClientConn) ConnectorClient {
	return &connectorClient{cc}
}

func (c *connectorClient) ExecuteGenericCommand(ctx context.Context, in *GenericCommand, opts ...grpc.CallOption) (*GenericCommandResponse, error) {
	out := new(GenericCommandResponse)
	err := grpc.Invoke(ctx, "/qlik.Connector/ExecuteGenericCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorClient) GetData(ctx context.Context, in *GetDataOptions, opts ...grpc.CallOption) (Connector_GetDataClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Connector_serviceDesc.Streams[0], c.cc, "/qlik.Connector/GetData", opts...)
	if err != nil {
		return nil, err
	}
	x := &connectorGetDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Connector_GetDataClient interface {
	Recv() (*BundledRows, error)
	grpc.ClientStream
}

type connectorGetDataClient struct {
	grpc.ClientStream
}

func (x *connectorGetDataClient) Recv() (*BundledRows, error) {
	m := new(BundledRows)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Connector service

type ConnectorServer interface {
	ExecuteGenericCommand(context.Context, *GenericCommand) (*GenericCommandResponse, error)
	GetData(*GetDataOptions, Connector_GetDataServer) error
}

func RegisterConnectorServer(s *grpc.Server, srv ConnectorServer) {
	s.RegisterService(&_Connector_serviceDesc, srv)
}

func _Connector_ExecuteGenericCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServer).ExecuteGenericCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qlik.Connector/ExecuteGenericCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServer).ExecuteGenericCommand(ctx, req.(*GenericCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connector_GetData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDataOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConnectorServer).GetData(m, &connectorGetDataServer{stream})
}

type Connector_GetDataServer interface {
	Send(*BundledRows) error
	grpc.ServerStream
}

type connectorGetDataServer struct {
	grpc.ServerStream
}

func (x *connectorGetDataServer) Send(m *BundledRows) error {
	return x.ServerStream.SendMsg(m)
}

var _Connector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qlik.Connector",
	HandlerType: (*ConnectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteGenericCommand",
			Handler:    _Connector_ExecuteGenericCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetData",
			Handler:       _Connector_GetData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc_server.proto",
}

func init() { proto.RegisterFile("grpc_server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 714 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdd, 0x4e, 0xdb, 0x58,
	0x10, 0xc6, 0xd8, 0xf9, 0xf1, 0x98, 0x0d, 0xe6, 0x2c, 0x8b, 0x22, 0xc4, 0xae, 0x22, 0xef, 0xc5,
	0x46, 0x68, 0x1b, 0xa1, 0x50, 0xf5, 0x3e, 0x4d, 0x02, 0xb2, 0x4a, 0x0c, 0x3a, 0x09, 0x2d, 0xad,
	0xaa, 0x56, 0xc6, 0x3e, 0xd0, 0xa8, 0xb6, 0x8f, 0xeb, 0x9f, 0xa6, 0x5c, 0xf5, 0x1d, 0x7a, 0xd5,
	0x77, 0xe8, 0x4b, 0x56, 0xe7, 0x2f, 0x36, 0x94, 0x8b, 0xde, 0xcd, 0x7c, 0x73, 0x66, 0xe6, 0x9b,
	0x6f, 0xc6, 0x86, 0x9d, 0xdb, 0x2c, 0x0d, 0xde, 0xe7, 0x24, 0xfb, 0x4c, 0xb2, 0x41, 0x9a, 0xd1,
	0x82, 0x22, 0xe3, 0x53, 0xb4, 0xfc, 0xe8, 0x44, 0xd0, 0x19, 0xd3, 0x24, 0x21, 0x41, 0xb1, 0xa4,
	0x89, 0x9b, 0xdc, 0x50, 0x74, 0x08, 0x76, 0xb0, 0x46, 0xe6, 0x45, 0xb6, 0x4c, 0x6e, 0xbb, 0x5a,
	0x4f, 0xeb, 0x9b, 0xf8, 0x17, 0x1c, 0x21, 0x30, 0xca, 0x9c, 0x64, 0xdd, 0x4d, 0x1e, 0xe7, 0x36,
	0xda, 0x87, 0x76, 0xea, 0xe7, 0xf9, 0x8a, 0x66, 0x61, 0x57, 0xe7, 0xf8, 0xda, 0x77, 0xbe, 0x6b,
	0xd0, 0x39, 0x25, 0x09, 0xc9, 0x96, 0xc1, 0x98, 0xc6, 0xb1, 0x9f, 0x84, 0xa8, 0x0b, 0xad, 0x40,
	0x98, 0xb2, 0x8b, 0x72, 0xd1, 0x1e, 0x34, 0x63, 0x52, 0x7c, 0xa0, 0xa1, 0x2c, 0x2f, 0x3d, 0xf4,
	0x0f, 0x40, 0xea, 0x67, 0x7e, 0x4c, 0x0a, 0x92, 0xe5, 0x5d, 0xbd, 0xa7, 0xf7, 0x4d, 0x5c, 0x43,
	0xd0, 0x53, 0x80, 0x8a, 0x68, 0xd7, 0xe8, 0x69, 0x7d, 0x6b, 0xb8, 0x3b, 0x60, 0xd3, 0x0e, 0xee,
	0x8f, 0x8a, 0x6b, 0xef, 0x9c, 0xff, 0x61, 0xef, 0x3e, 0x33, 0x4c, 0xf2, 0x94, 0x26, 0x39, 0x61,
	0x43, 0x86, 0x7e, 0xe1, 0x4b, 0x7a, 0xdc, 0x76, 0x2e, 0xc1, 0x9a, 0x93, 0x3c, 0x57, 0x9a, 0x29,
	0x1d, 0xb4, 0x9a, 0x0e, 0x07, 0x60, 0xe6, 0xf2, 0x89, 0x9a, 0xa0, 0x02, 0xd0, 0x2e, 0x34, 0x42,
	0x1a, 0xb8, 0x4a, 0x22, 0xe1, 0x38, 0x6f, 0xa0, 0x3d, 0xf1, 0x0b, 0x9f, 0xd7, 0x64, 0xf9, 0x85,
	0x5f, 0x90, 0x98, 0x24, 0x85, 0x2c, 0x5c, 0x01, 0xe8, 0x08, 0xfe, 0x5c, 0x3b, 0x17, 0x95, 0x1a,
	0xa2, 0xcf, 0x63, 0x21, 0xe7, 0x07, 0xd7, 0xbe, 0x60, 0xf5, 0xcf, 0x53, 0x36, 0xf2, 0x43, 0xa5,
	0xb4, 0xdf, 0x53, 0x0a, 0x1d, 0x83, 0x95, 0x57, 0xb3, 0xf3, 0x96, 0xd6, 0x70, 0x47, 0xa4, 0xd5,
	0x44, 0xc1, 0xf5, 0x57, 0x68, 0xf0, 0x60, 0x69, 0x2c, 0xa7, 0x23, 0x72, 0xd4, 0xc4, 0xf5, 0x25,
	0x3a, 0x57, 0x60, 0x4c, 0x4a, 0x3f, 0x62, 0xe7, 0x91, 0x94, 0xf1, 0x44, 0xe9, 0xaf, 0x61, 0xe5,
	0xb2, 0x48, 0x5e, 0x64, 0x3c, 0x22, 0xa6, 0x56, 0xae, 0x50, 0x2e, 0x73, 0x73, 0xaf, 0x8c, 0x22,
	0xde, 0xaa, 0x8d, 0x2b, 0xc0, 0xf9, 0x0f, 0x74, 0x4c, 0x57, 0xa8, 0x07, 0x8d, 0xb0, 0xf4, 0xa3,
	0xbc, 0xab, 0xf5, 0xf4, 0xbe, 0x35, 0x04, 0xc9, 0xa5, 0xf4, 0x23, 0x2c, 0x02, 0xce, 0x5b, 0x68,
	0x8e, 0x69, 0x54, 0xc6, 0x89, 0x6c, 0xb5, 0x4c, 0x6e, 0xc5, 0x6b, 0xd1, 0x8a, 0xb9, 0x92, 0xde,
	0xb5, 0x90, 0x5e, 0x97, 0xf4, 0x98, 0xcb, 0xae, 0x74, 0xdd, 0x53, 0x5c, 0x69, 0x1b, 0xd7, 0x10,
	0xc7, 0x03, 0xeb, 0x79, 0x99, 0x84, 0x11, 0x09, 0x31, 0x5d, 0xe5, 0xe8, 0x6f, 0x30, 0x32, 0xba,
	0x52, 0x6c, 0x4c, 0xc1, 0x06, 0xd3, 0x15, 0xe6, 0x30, 0xea, 0x81, 0x11, 0xd0, 0x48, 0x34, 0xb1,
	0x86, 0x5b, 0x6a, 0x47, 0x8c, 0x1d, 0xe6, 0x11, 0x67, 0x02, 0xe6, 0xc9, 0x92, 0x44, 0xa1, 0xba,
	0xc7, 0xc4, 0x8f, 0x89, 0xba, 0x47, 0x66, 0xa3, 0x7f, 0xc1, 0x28, 0xee, 0x52, 0xc2, 0xc5, 0xea,
	0x0c, 0xb7, 0x45, 0x09, 0x9e, 0xb2, 0xb8, 0x4b, 0x09, 0xe6, 0x41, 0xe7, 0x1d, 0x6c, 0xcb, 0x1b,
	0x59, 0x9f, 0xff, 0x13, 0x30, 0x6f, 0x54, 0x61, 0x49, 0xaf, 0x9e, 0xcc, 0x37, 0x57, 0xbd, 0x60,
	0xe2, 0x17, 0xfe, 0x75, 0x44, 0x3c, 0xd6, 0x5f, 0x9e, 0xfd, 0x1a, 0x38, 0xfc, 0x2a, 0x59, 0xb2,
	0x96, 0xc8, 0x82, 0xd6, 0xa5, 0xf7, 0xc2, 0x3b, 0x7f, 0xe5, 0xd9, 0x1b, 0xc8, 0x84, 0xc6, 0x68,
	0x3e, 0x76, 0x5d, 0x5b, 0x43, 0x6d, 0x30, 0xf0, 0x74, 0x74, 0x66, 0x6f, 0x32, 0x6b, 0x32, 0x5a,
	0x4c, 0x6d, 0x9d, 0x59, 0x0b, 0x77, 0x36, 0xb5, 0x0d, 0xf4, 0x07, 0x98, 0xcc, 0x9a, 0x2f, 0x46,
	0xb3, 0x0b, 0xbb, 0x81, 0xb6, 0xa0, 0xed, 0x7a, 0x8b, 0x29, 0x7e, 0x39, 0x3a, 0xb3, 0x9b, 0xac,
	0x24, 0xf3, 0x4e, 0xa7, 0xd8, 0x6e, 0xa1, 0x16, 0xe8, 0x27, 0xee, 0x95, 0xdd, 0x66, 0xb5, 0x67,
	0xe7, 0xde, 0xf4, 0xb5, 0x6d, 0x0e, 0xbf, 0x69, 0x60, 0xca, 0xdb, 0xa6, 0x19, 0x9a, 0xc1, 0x5f,
	0xd3, 0x2f, 0x24, 0x28, 0x0b, 0xf2, 0xe0, 0xaf, 0x24, 0xbf, 0x82, 0xfb, 0xe8, 0xfe, 0xc1, 0x63,
	0xa8, 0x12, 0xca, 0xd9, 0x40, 0xcf, 0xa0, 0x25, 0xd5, 0xab, 0x0a, 0xd4, 0x3f, 0xb8, 0x7d, 0xf9,
	0x95, 0xd4, 0x16, 0xef, 0x6c, 0x1c, 0x69, 0xd7, 0x4d, 0xfe, 0x47, 0x3e, 0xfe, 0x19, 0x00, 0x00,
	0xff, 0xff, 0x5d, 0x69, 0x3f, 0x38, 0xa6, 0x05, 0x00, 0x00,
}
